OO,ÖÜËÄ, 25 3ÔÂ 2021 20:26:57 CST
Method,BRANCH,CONTROL,LOC
"Const.Const(BigInteger)",0,0,4
"Const.clone()",0,0,3
"Const.deri()",0,0,3
"Const.toString()",0,0,3
"Cos.Cos(BigInteger)",0,0,4
"Cos.clone()",0,0,3
"Cos.deri()",0,3,11
"Cos.toString()",0,2,9
"CreatTree.getRoot(String)",0,9,61
"Deri.deri(Node)",0,10,34
"Deri.deritoolong(String,String,String,String)",0,13,49
"Expression.Expression(String)",0,0,3
"Expression.clone()",0,0,3
"Expression.deri()",0,1,12
"Expression.toString()",0,1,9
"Factor.clone(Factor)",0,6,22
"Factor.deri(Factor)",0,6,22
"Macro.getPatternConst()",0,0,3
"Macro.getPatternCos()",0,0,3
"Macro.getPatternExp()",0,0,3
"Macro.getPatternItem()",0,0,3
"Macro.getPatternPower()",0,0,3
"Macro.getPatternSin()",0,0,3
"MainClass.main(String[])",0,1,19
"ManageExp.deleteBracket(String)",1,9,38
"ManageInput.manageBracket(String)",0,5,24
"ManageInput.manageInput(String)",0,0,6
"ManageInput.manageOrigin(String)",0,2,22
"Node.Node(Factor)",0,0,5
"Node.Node(Factor,Node,Node)",0,0,5
"Node.add(Node,Node)",0,1,10
"Node.getFactor()",0,0,3
"Node.getLeftnode()",0,0,3
"Node.getRightnode()",0,0,3
"Node.setFactor(Factor)",0,0,3
"Node.setLeftnode(Node)",0,0,3
"Node.setRightnode(Node)",0,0,3
"Node.toString()",0,1,7
"Oper.Oper(String)",0,0,3
"Oper.clone()",0,0,3
"Oper.toString()",0,0,3
"Power.Power(BigInteger)",0,0,3
"Power.clone()",0,0,3
"Power.deri()",0,4,13
"Power.getIndex()",0,0,3
"Power.toString()",0,3,11
"Sin.Sin(BigInteger)",0,0,3
"Sin.clone()",0,0,3
"Sin.deri()",0,3,11
"Sin.toString()",0,2,9
"Tree.Tree()",0,0,3
"Tree.add(Node,Node)",0,3,17
"Tree.getRoot()",0,0,3
"Tree.setRoot(Node)",0,0,3

Class,LOC,NAAC,NOAC,NOOC
"Const",17,1,1,2
"Cos",31,1,1,2
"CreatTree",63,0,1,0
"Deri",85,0,2,0
"Expression",30,1,1,2
"Factor",46,0,2,0
"Macro",38,11,6,0
"MainClass",21,0,1,0
"ManageExp",40,0,1,0
"ManageInput",54,0,3,0
"Node",50,3,7,1
"Oper",12,1,0,2
"Power",36,1,2,2
"Sin",29,1,1,2
"Tree",29,1,3,0

Package,C,LOC,METH
"",15,645,54

